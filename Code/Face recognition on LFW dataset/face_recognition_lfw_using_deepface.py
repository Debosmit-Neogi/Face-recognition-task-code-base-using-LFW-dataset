# -*- coding: utf-8 -*-
"""face recognition-lfw-using deepFace.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U9POa0HPzQmTbt_MzGAAZqeS3gcU0IPX
"""

from sklearn.datasets import fetch_lfw_pairs

import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
import os
import glob

lfw=fetch_lfw_pairs(subset='test', color=True, resize=1)

pairs=lfw.pairs
target=lfw.target

print(target.shape)
print(pairs.shape)

"""Dimension of pairs:

1000 images
2: pairs
125,94: dimensions of image
3: RGB
"""

# 1: same person; 0: different person
print(target)

num=len(pairs)
for i in range(num-1):
  pair=pairs[i]
  pair[0]/=255
  pair[1]/=255

"""Visualise pair number 1"""

index=1

pair=pairs[1]
print(target[1]) #check if pair[1] is of same person or not

plt.imshow(pair[0])

plt.imshow(pair[1])

!pip install deepface

from deepface import DeepFace

AF=DeepFace.build_model('ArcFace')

models = ["VGG-Face","ArcFace"]
print(len(models))

verification=[] #stores verification score for different models

for j in range(len(models)-1):
  deepface_obj=DeepFace.verify(pair[0], pair[1], model_name=models[j], enforce_detection=False,detector_backend='opencv' )
  verification.append(deepface_obj)
  if deepface_obj["verified"]==True:
    prediction=1
  else:
    prediction=0
  print(prediction)

print(verification)

"""**Prediction for all 1000 pairs-ArcFace**





"""

predictions=[] #array to store predictions

model=DeepFace.build_model('ArcFace')

for i in range(0, pairs.shape[0]):
  pair=pairs[i]
  img1=pair[0]
  img2=pair[1]
  actual= target[i] # actual label for each pair
  deepface_obj=DeepFace.verify(pair[0], pair[1], model_name='ArcFace', model=model, enforce_detection=False,detector_backend='opencv')
  prediction=1 if deepface_obj['verified'] == True else 0
  predictions.append(prediction)

# print(prediction)
print(len(predictions))

from sklearn.metrics import classification_report
result=classification_report(target, predictions)
print(result)

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
accuracy = 100*accuracy_score(target, predictions)
precision = 100*precision_score(target, predictions)
recall = 100*recall_score(target, predictions)
f1 = 100*f1_score(target, predictions)

print("F1 score using ArcFace:", f1)



"""**Prediction for all 1000 pairs-VGG-Face**"""

predictions=[] #array to store predictions

model=DeepFace.build_model('VGG-Face')

for i in range(0, pairs.shape[0]):
  pair=pairs[i]
  img1=pair[0]
  img2=pair[1]
  actual= target[i] # actual label for each pair
  deepface_obj=DeepFace.verify(pair[0], pair[1], model_name='VGG-Face', model=model, enforce_detection=False,detector_backend='opencv')
  prediction=1 if deepface_obj['verified'] == True else 0
  predictions.append(prediction)

from sklearn.metrics import classification_report
result=classification_report(target, predictions)
print(result)

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
accuracy = 100*accuracy_score(target, predictions)
precision = 100*precision_score(target, predictions)
recall = 100*recall_score(target, predictions)
f1 = 100*f1_score(target, predictions)

print("F1 score using VGG-Face:", f1)

